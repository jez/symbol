#!/usr/bin/env bash

set -euo pipefail

# Find folder where the script is located.
# Works even if the executable is a symlink, and on macOS and Linux.
BINPATH="$(perl -MCwd -le 'print Cwd::abs_path(shift)' "${BASH_SOURCE[0]}")"
BINDIR="$(dirname "$BINPATH")"
PREFIX="$(dirname "$BINDIR")"
SCAFFOLD="$PREFIX/share/symbol/scaffold"

VERSION="v0.9.0"

# ----- logging & colors -------------------------------------------------- {{{

red=$'\x1b[0;31m'
green=$'\x1b[0;32m'
yellow=$'\x1b[0;33m'
cyan=$'\x1b[0;36m'
cnone=$'\x1b[0m'

if [ -t 1 ]; then
  USE_COLOR=1
else
  USE_COLOR=0
fi

# Detects whether we can add colors or not
in_color() {
  local color="$1"
  shift

  if [ "$USE_COLOR" = "1" ]; then
    echo "$color$*$cnone"
  else
    echo "$*"
  fi
}

success() { echo "$(in_color "$green" "[ OK ]") $*"; }
error() {   echo "$(in_color "$red"   "[ERR!]") $*"; }
info() {    echo "$(in_color "$cyan"  "[INFO]") $*"; }
# Color entire warning to get users' attention (because we won't stop).
warn() { in_color "$yellow" "[WARN] $*"; }

# }}}

# ----- helper functions ------------------------------------------------------

ensure_scaffold() {
  if ! [ -d "$SCAFFOLD" ]; then
    error "Installation is corrupt. Missing required folder:"
    error "    $SCAFFOLD"
    exit 1
  fi
}

make_target_dir() {
  local force="$1"

  if [ "$force" = "force" ]; then
    mkdir -p "$TARGET"
  else
    mkdir "$TARGET"
  fi

  # Remember the target_dir for when we cd into $SCAFFOLD
  local target_dir
  pushd "$TARGET" &> /dev/null
  target_dir="$(pwd)"
  popd &> /dev/null

  echo "$target_dir"
}

install_scaffold() {
  local target_file="$1"
  shift

  # Replace TARGET in the file names and file contents
  # Replace VERSION in the file contents only
  for file in "$@"; do
    target_file="$target_dir/$(sed -e "s+TARGET+$TARGET+" <<< "$file")"

    mkdir -p "$(dirname "$target_file")"
    sed -e "s+TARGET+$TARGET+; s+VERSION+$VERSION+" "$file" > "$target_file"
  done

  if [ -f "$target_dir/symbol" ]; then
    # The sed makes a new file which doesn't have permissions
    chmod +x "$target_dir/symbol"
  fi
}

finish_nonempty_project() {
  # Get rid of any generated files we might have copied
  pushd "$TARGET" &> /dev/null
  symbol clean &> /dev/null
  popd &> /dev/null

  success "Created project:"
  echo

  if command -v tree &> /dev/null; then
    tree --noreport -a "$TARGET"
  else
    find "$TARGET" -type f
  fi
}

finish_empty_project() {
  success "Added the 'symbol' command to your project."

  if ! [ -f "$TARGET/$TARGET.cm" ] && ! [ -f "$TARGET/$TARGET.mlb" ]; then
    warn "Did not detect a file named $TARGET.cm or $TARGET.mlb."
    info "The symbol command depends on these files to build your project."
    info "You will have to create at least one of these files before using symbol."
  fi
}

print_help() {
  cat <<EOF

symbol-new: Create a new symbol project

Usage:
  symbol-new [options] <target>
  symbol-new --version

Arguments:
  <target>    The name of the project to be created

Options:
  --empty     Create the project without starter files (only the symbol script)
              Also useful when adding symbol to an existing project.


EOF
}

# ----- option parsing ---------------------------------------------------- {{{

TARGET=
EMPTY=

while [[ $# -gt 0 ]]; do
  case $1 in
    --empty)
      EMPTY=1
      shift
      ;;
    --version)
      echo "$VERSION"
      exit
      ;;
    -*)
      error "Unrecognized option: $1"
      print_help
      exit 1
      ;;
    *)
      if [ -z "$TARGET" ]; then
        TARGET="$1"
        shift
      else
        error "Extra argument: '$1'"
        print_help
        exit 1
      fi
      ;;
  esac
done

if [ -z "$TARGET" ]; then
  error "Missing required argument: <target>"
  print_help
  exit 1
elif grep '[^0-9A-Za-z_-]' <<< "$TARGET"; then
  error "<target> ($TARGET) must contain only alphanumeric, underscore, or hyphen"
  print_help
  exit 1
fi

# }}}

# ----- main ------------------------------------------------------------------

main() {
  ensure_scaffold

  if [ -n "$EMPTY" ]; then
    # An "empty" project has only the symbol script and associated makefile

    info "Making directory '$TARGET/'..."
    local target_dir
    target_dir="$(make_target_dir "force")"

    # cd into $SCAFFOLD so that all filenames are relative
    pushd "$SCAFFOLD" &> /dev/null
    install_scaffold "$target_dir" symbol .symbol.mk
    popd &> /dev/null

    finish_empty_project
  else
    # A non-empty project has all the scaffold files, and must start from an
    # empty directory.  make_target_dir quits if $TARGET/ already exists

    info "Making directory '$TARGET/'..."
    local target_dir
    target_dir="$(make_target_dir "quit")"

    # cd into $SCAFFOLD so that all filenames are relative
    pushd "$SCAFFOLD" &> /dev/null
    # We explicitly want word splitting for the find
    # shellcheck disable=SC2046
    install_scaffold "$target_dir" $(find . -type f)
    popd &> /dev/null

    finish_nonempty_project
  fi
}

main

# vim:fdm=marker
